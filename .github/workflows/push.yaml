# Имя рабочего процесса, которое будет отображаться на вкладке Actions репозитория.
name: golang-pipeline
# Указывает, какие события могут вызывать запуск рабочего процесса. 
# Запуск рабочего процесса происходит каждый раз, когда кто-то отправляет изменение в репозиторий или объединяет запрос на извлечение. 
# Это происходит при отправке в любую ветку.
on: push
# Группирует все задания, которые выполняются в рабочем процессе 
jobs:
  # Определяет задание test. Дочерние ключи будут определять свойства этого задания.
  test:
    # Настраивает задание test для запуска в последней версии Ubuntu Linux runner.
    # Задание будет выполняться на новой виртуальной машине GitHub.
    runs-on: ubuntu-latest
    # Добавляет и запускает Docker-контейнер для запуска тестов.
    container: golang:1.24
    steps:
      # Это действие проверяет ваш репозиторий, чтобы ваш рабочий процесс мог получить к нему доступ. 
      - uses: actions/checkout@v4

      # Команда для запуска. Она запускает Go тесты, которые вы написали.
      - name: Run Unit Tests
        run: GOOS=linux GOARCH=amd64 go test
      # Первый шаг будет запускать команду go vet, чтобы проверить код на наличие ошибок. Шаг так и будет называться - Vet.
      - name: Vet
        run: |
          go vet ./...